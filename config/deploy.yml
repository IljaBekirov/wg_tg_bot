# Name of your application. Used to uniquely configure containers.
service: wg_tg_bot

# Name of the container image.
image: ibekirov/wg_tg_bot

# Deploy to these servers.
servers:
  web:
    hosts:
      - 89.22.224.1
    labels:
      traefik.http.routers.wg_tg_bot.rule: Host(`wgbot.ru`)
      traefik.http.routers.wg_tg_bot.entrypoints: websecure
      traefik.http.routers.wg_tg_bot_secure.rule: Host(`wgbot.ru`)
      traefik.http.routers.wg_tg_bot_secure.tls: true
      traefik.http.routers.wg_tg_bot_secure.tls.certresolver: letsencrypt
    options:
      network: "private"
  # job:
  #   hosts:
  #     - 192.168.0.1
  #   cmd: bin/jobs

#traefik:
#  options:
#    publish:
#      - "443:443"
#    volume:
#      - "/letsencrypt/acme.json:/letsencrypt/acme.json"
#    network: "private"
#  args:
#    entryPoints.web.address: ":80"
#    entryPoints.websecure.address: ":443"
#    entryPoints.web.http.redirections.entryPoint.to: websecure
#    entryPoints.web.http.redirections.entryPoint.scheme: https
#    entryPoints.web.http.redirections.entrypoint.permanent: true
#    certificatesResolvers.letsencrypt.acme.email: "ilja.bekirov@gmail.com"
#    certificatesResolvers.letsencrypt.acme.storage: "/letsencrypt/acme.json"
#    certificatesResolvers.letsencrypt.acme.httpchallenge: true
#    certificatesResolvers.letsencrypt.acme.httpchallenge.entrypoint: web
# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
# Remove this section when using multiple web servers and ensure you terminate SSL at your load balancer.
#
# Note: If using Cloudflare, set encryption mode in SSL/TLS setting to "Full" to enable CF-to-app encryption.
proxy:
  ssl: true
  host: www.wgbot.ru
  # Proxy connects to your container on port 80 by default.
  # app_port: 3000

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  # server: registry.digitalocean.com / ghcr.io / ...
  username: ibekirov

  # Always use an access token rather than real password (pulled from .kamal/secrets).
  password:
    - KAMAL_REGISTRY_PASSWORD

# Configure builder setup.
builder:
  arch: amd64
  # Pass in additional build args needed for your Dockerfile.
  # args:
  #   RUBY_VERSION: <%= ENV["RBENV_VERSION"] || ENV["rvm_ruby_string"] || "#{RUBY_ENGINE}-#{RUBY_ENGINE_VERSION}" %>

# Inject ENV variables into containers (secrets come from .kamal/secrets).
#
env:
  clear:
    RAILS_ENV: production
    RACK_ENV: production
    RAILS_LOG_TO_STDOUT: true
    RAILS_SERVE_STATIC_FILES: true
    DB_HOST: wg_tg_bot-db
  secret:
    - RAILS_MASTER_KEY
    - SMTP_PASSWORD
    - SMTP_SERVER
    - SMTP_LOGIN
    - DB_HOST
    - POSTGRES_USER
    - POSTGRES_PASSWORD

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal app logs -r job" will tail logs from the first server in the job section.
#
# aliases:
#   shell: app exec --interactive --reuse "bash"

# Use a different ssh user than root
#
#ssh:
#  user: deploy

# Use a persistent storage volume.
#
volumes:
  - "wg_tg_bot_storage:/app/storage"

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
#
# asset_path: /app/public/assets

# Configure rolling deploys by setting a wait time between batches of restarts.
#
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

# Use accessory services (secrets come from .kamal/secrets).
#
accessories:
  db:
    image: postgres:17.0
    host: 89.22.224.1
    port: 127.0.0.1:5432:5432
    env:
      clear:
        MYSQL_ROOT_HOST: '%'
        POSTGRES_USER: 'wg_tg_bot'
        POSTGRES_DB: 'wg_tg_bot_production'
#        POSTGRES_HOST_AUTH_METHOD: trust
      secret:
        - POSTGRES_PASSWORD
        - POSTGRES_USER
        - YOUR_APP_NAME_API_DATABASE_PASSWORD
    files:
      - config/init.sql:/docker-entrypoint-initdb.d/setup.sql
    directories:
      - data:/var/lib/postgresql/data
  redis:
    image: redis:7.4
    host: 89.22.224.1
    port: 6379
    directories:
      - data:/data
